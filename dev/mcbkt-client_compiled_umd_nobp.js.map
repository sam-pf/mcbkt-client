{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 5c2eb048fe064e1982d4","webpack:///./src/mcbkt-client.js"],"names":["ajax_as_promise","post_scores_for_mcbkt_analysis","post_logdata_for_mcbkt_analysis","url","method","data","toUpperCase","Promise","resolve","reject","req","XMLHttpRequest","open","onload","status","response","Error","statusText","onerror","e","setRequestHeader","JSON","stringify","send","logdata"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;AC7DA;;;;;;;;;;;;AAYA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA0BgBA,e,GAAAA,e;QA0CAC,8B,GAAAA,8B;QA6BAC,+B,GAAAA,+B;AAvET,SAASF,eAAT,CAA0BG,GAA1B,EAAqD;AAAA,MAAtBC,MAAsB,uEAAb,KAAa;AAAA,MAANC,IAAM;;AAC1DD,WAASA,OAAOE,WAAP,EAAT;AACA,SAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAMC,MAAM,IAAIC,cAAJ,EAAZ;AACAD,QAAIE,IAAJ,CAAUR,MAAV,EAAkBD,GAAlB;AACAO,QAAIG,MAAJ,GAAa;AAAA,aAAOH,IAAII,MAAJ,KAAe,GAAhB,GAAuBN,QAASE,IAAIK,QAAb,CAAvB,GACjBN,OAAQO,MAAON,IAAIO,UAAX,CAAR,CADW;AAAA,KAAb;AAEAP,QAAIQ,OAAJ,GAAc,UAACC,CAAD;AAAA,aAAOV,OAAQO,0BAAyBG,CAAzB,CAAR,CAAP;AAAA,KAAd;AACA,QAAKd,IAAL,EAAY;AACVK,UAAIU,gBAAJ,CAAsB,cAAtB,EAAsC,gCAAtC;AACAf,aAAOgB,KAAKC,SAAL,CAAgBjB,IAAhB,CAAP;AACD;AACDK,QAAIa,IAAJ,CAAUlB,IAAV;AACD,GAXM,CAAP;AAYD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BO,SAASJ,8BAAT,CAAyCI,IAAzC,EAC4D;AAAA,MAA7DF,GAA6D,uEAAvD,qDAAuD;;AAChE,SAAOH,gBAAiBG,GAAjB,EAAsB,MAAtB,EAA8BE,IAA9B,CAAP;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,SAASH,+BAAT,CAA0CsB,OAA1C,EAC8D;AAAA,MAA/DrB,GAA+D,uEAAzD,uDAAyD;;AAClE,SAAOH,gBAAiBG,GAAjB,EAAsB,MAAtB,EAA8BqB,OAA9B,CAAP;AACF;;AAED;;;;kBAIetB,+B","file":"./dev/mcbkt-client_compiled_umd_nobp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"mcbkt-client\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mcbkt-client\"] = factory();\n\telse\n\t\troot[\"mcbkt-client\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5c2eb048fe064e1982d4","/**\n * @fileOverview This module contains utility functions for accessing MCBKT\n *   engine of <a href=\"https://ukde.physicsfront.com\">UKDE by Physics\n *   Front</a>.\n * @copyright (c) 2017, Sam Gweon (Sam@physicsfront.com)\n * @license <a href=\"https://opensource.org/licenses/BSD-3-Clause\">\n *   BSD-3-Clause</a>\n * @author Sam Gweon (Sam@physicsfront.com)\n * @version 0.1.0\n * @module mcbkt-client\n */\n\n\"use strict\"\n\n/**\n * Makes an ajax call to <tt>url</tt> and returns a <tt>Promise</tt> object.\n *\n * @returns {} A <tt>Promise</tt> object.  The returned object can be\n *   used as shown in the example.\n * @example\n * ajax_as_promise ('https://...', ...)\n *   .then ((data) =>\n *      // do stuff with data\n *   )\n *   .catch ((err) =>\n *      // do stuff on error\n *   )\n * @see https://stackoverflow.com/questions/8567114/\n *\n * @param {String} url - URL to connect to.\n * @param {String} [method=\"get\"] - Http(s) method such as \"get\" or \"post\"\n *   (case-independent).  If <tt>url</tt> does not use http(s) protocol, then\n *   this argument is ignored.\n * @param {} [data] - Any data that will be sent as\n *   <tt>JSON</tt> along with the URL request.  Any false value of\n *   this argument means no <tt>JSON</tt> data.  Any true value will be\n *   converted to <tt>JSON</tt> to be sent.  Naturally, such value also\n *   causes the \"Content-Type\" header to be set to \"json\" for the\n *   <tt>XMLHttpRequest</tt> object that opens request to <tt>url</tt>.\n */\nexport function ajax_as_promise (url, method = \"GET\", data) {\n  method = method.toUpperCase ()\n  return new Promise ((resolve, reject) => {\n    const req = new XMLHttpRequest ()\n    req.open (method, url)\n    req.onload = () => (req.status === 200) ? resolve (req.response) :\n      reject (Error (req.statusText))\n    req.onerror = (e) => reject (Error (`Network Error: ${e}`))\n    if ( data ) {\n      req.setRequestHeader (\"Content-Type\", \"application/json;charset=UTF-8\")\n      data = JSON.stringify (data)\n    }\n    req.send (data)\n  })\n}\n\n/**\n * Makes an ajax call to UKDE to post score data and potentially get a MCBKT\n * calculation done.\n *\n * @returns {} A <tt>Promise</tt> object.  The returned object can be\n *   used as shown in the example.  Just because the promise is successfully\n *   fulfilled does not mean that the returned data will contain MCBKT\n *   analysis result.  If <tt>error</tt> field does not exist, data will\n *   contain valid MCBKT analysis result.\n * @example\n * ajax_as_promise ('https://...', ...)\n *   .then ((data) =>\n *      // do stuff with data\n *   )\n *   .catch ((err) =>\n *      // do stuff on error\n *\n * @param {} [data] - This must be a hashmap with an entry \"scores\", which\n *   must hold an array of numbers, normally bound within the [0,1] range.\n *   Optional entries include \"score-max' and \"times\".\n * @param {String} [url] - The URL for the MCBKT analysis.  For security,\n *   no sensitive information must appear in the URL (or data).  The current\n *   default value is a temporary one that should work \"for a while\".\n *   However, it may stop working at some point, e.g., if better proxy URLs\n *   are available.\n */\nexport function post_scores_for_mcbkt_analysis (data,\n      url = 'https://ukde.physicsfront.com/mcbkt/codapproxy_stub') {\n   return ajax_as_promise (url, 'post', data)\n}\n\n/**\n * Makes an ajax call to UKDE to post logdata and potentially get a MCBKT\n * calculation done.\n *\n * @returns {} A <tt>Promise</tt> object.  The returned object can be\n *   used as shown in the example.  When the promise is successfully\n *   fulfilled, the returned data may not contain any MCBKT analysis result.\n *   Only when the accumulated data merit a new MCBKT analysis, data will\n *   contain MCBKT analysis result.\n * @example\n * ajax_as_promise ('https://...', ...)\n *   .then ((data) =>\n *      // do stuff with data\n *   )\n *   .catch ((err) =>\n *      // do stuff on error\n *\n * @param {} [logdata] - This must be the logdata in the form of a hashmap.\n * @param {String} [url] - The URL for the MCBKT analysis.  For security,\n *   no sensitive information must appear in the URL (or logdata).  The\n *   current default value is a temporary one that should work \"for a while\".\n *   However, it may stop working at some point, e.g., if better proxy URLs\n *   are available.\n */\nexport function post_logdata_for_mcbkt_analysis (logdata,\n      url = 'https://ukde.physicsfront.com/logdata/codapproxy_stub') {\n   return ajax_as_promise (url, 'post', logdata)\n}\n\n/**\n * <b>default export:</b> <a\n * href=\"#.post_logdata_for_mcbkt_analysis\">post_logdata_for_mcbkt_analysis</a>\n */\nexport default post_logdata_for_mcbkt_analysis\n\n\n\n// WEBPACK FOOTER //\n// ./src/mcbkt-client.js"],"sourceRoot":""}